@page "/calculator"
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@using MudBlazor

<MudPaper style="margin:20px; padding:10px">
<h3>Investment Calculator</h3>

@if (_cryptos != null)
{
    <MudItem style="display:flex; align-items:center">
        <MudItem xs="10" sm="10" md="10" lg="10">
                @foreach (var plan in _investmentPlans)
                {
                    <MudItem xs="12" sm="12" md="12" lg="12" style="display:flex; align-items:center">
                        <MudItem xs="3" sm="3" md="3" lg="3">
                            <MudSelect Label="Currency" T="int" Required="true" Class="mx-2" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" @bind-Value="plan.CryptoId">
                                @foreach (var crypto in _cryptos)
                                {
                                    <MudSelectItem Value="@crypto.Id">@crypto.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="3" sm="3" md="3" lg="3" Class="d-flex flex-column align-center justify-center">
                            <MudDatePicker Required="true" Label="Start date" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" ShowWeekNumbers="true" @bind-Date="plan.StartDate" />
                        </MudItem>

                        <MudItem xs="3" sm="3" md="3" lg="3">
                            <MudNumericField Required="true" @bind-Value="plan.MonthlyInvestment" Label="Monthly investment" Variant="Variant.Text" Min="0" Max="999999999" />
                        </MudItem>

                        <MudItem xs="3" sm="3" md="3" lg="3" Class="d-flex flex-column align-center justify-center">
                            <MudDatePicker Required="true" Label="End date" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" ShowWeekNumbers="true" @bind-Date="_endDate" />
                        </MudItem>


                    </MudItem>
                }
        </MudItem>
        <MudItem xs="2" sm="2" md="2" lg="2">
                <MudItem xs="12" sm="12" md="12" lg="12" Class="d-flex flex-column align-center justify-center">
                    <MudButton @onclick="async () => await CalculateDCAInvestment()" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Calculate" Color="MudBlazor.Color.Primary">Calculate</MudButton>
                </MudItem>
        </MudItem>
    </MudItem>




    <MudItem xs="3" sm="3" md="3" lg="3">
            <MudButton style="margin:10px" @onclick="AddInvestmentPlan" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="MudBlazor.Color.Primary">Add another investment plan</MudButton>
    </MudItem>
}


</MudPaper>

@if (_investmentDataList.Any())
{
    <MudGrid>
        <MudItem xs="12">
            <MudTable Class="px-4 py-8 mud-height-full" MultiSelection="false" T="InvestmentData" Items="@_investmentDataList">
                <HeaderContent>
                    <MudTh>Start Date</MudTh>
                    <MudTh>Invested Amount</MudTh>
                    <MudTh>Crypto Amount</MudTh>
                    <MudTh>Value Today EUR</MudTh>
                    <MudTh>ROI</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Date?.ToShortDateString()</MudTd>
                    <MudTd>@context.InvestedAmount</MudTd>
                    <MudTd>@context.CryptoAmount.ToString("F10")</MudTd>
                    <MudTd>@context.ValueToday.ToString("F2")</MudTd>
                    <MudTd>@context.ROI.ToString("F2")%</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
}
else
{
    <MudPaper style="margin:20px; padding:10px">
        <h4>No investment data found.</h4>
    </MudPaper>

}



<MudPaper style="margin:20px; padding:10px">
    <h3>Calculate for Multiple Cryptos</h3>

    @if (_cryptos != null)
    {

        <MudItem xs="12" sm="12" md="12" lg="12" style="display:flex; align-items:center">
            <MudItem xs="3" sm="3" md="3" lg="3">
                <MudSelect @bind-SelectedValues="_selectedCryptoIds" MultiSelection="true" Label="Currencies" T="int" Required="true" Class="mx-2" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var crypto in _cryptos)
                    {
                        <MudSelectItem Value="@crypto.Id">@crypto.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="3" sm="3" md="3" lg="3" Class="d-flex flex-column align-center justify-center">
                <MudDatePicker Required="true" Label="Start date" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" ShowWeekNumbers="true" @bind-Date="_multipleStartDate"/>
            </MudItem>

            <MudItem xs="3" sm="3" md="3" lg="3">
                <MudNumericField Required="true" @bind-Value="_monthlyInvestment" Label="Monthly investment" Variant="Variant.Text" Min="0" Max="999999999" />
            </MudItem>

            <MudItem xs="3" sm="3" md="3" lg="3" Class="d-flex flex-column align-center justify-center">
                <MudDatePicker Required="true" Label="End date" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" ShowWeekNumbers="true" @bind-Date="_multipleEndDate"/>
            </MudItem>


            <MudItem xs="3" sm="3" md="3" lg="3" Class="d-flex flex-column align-center justify-center">
                <MudButton @onclick="async () => await CalculateDCAInvestmentForMultipleCryptos()" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Calculate" Color="MudBlazor.Color.Primary">Calculate portfolio</MudButton>
            </MudItem>
        </MudItem>
    }


</MudPaper>


@if (_multipleInvestmentDataList.Any())
{
    <MudGrid>
        <MudItem xs="12">
            <MudTable Class="px-4 py-8 mud-height-full" MultiSelection="false" T="InvestmentData" Items="@_multipleInvestmentDataList">
                <HeaderContent>
                    <MudTh>Start Date</MudTh>
                    <MudTh>Invested Amount</MudTh>
                    <MudTh>Crypto Amount</MudTh>
                    <MudTh>Value Today EUR</MudTh>
                    <MudTh>ROI</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Date?.ToShortDateString()</MudTd>
                    <MudTd>@context.InvestedAmount</MudTd>
                    <MudTd>@context.CryptoAmount.ToString("F10")</MudTd>
                    <MudTd>@context.ValueToday.ToString("F2")</MudTd>
                    <MudTd>@context.ROI.ToString("F2")%</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
}
else
{
    <MudPaper style="margin:20px; padding:10px">
        <h4>No investment data for portfolio selected.</h4>
    </MudPaper>
}



@code {
    #region SINGLE DCA
    private DateTime? _startDate =  null;
    private DateTime? _endDate = DateTime.Today;
    private List<CryptoCurrency> _cryptos = new List<CryptoCurrency>();
    private List<InvestmentData> _investmentDataList = new List<InvestmentData>();
    private List<InvestmentPlan> _investmentPlans = new List<InvestmentPlan>();


    #endregion

    #region MULTIPLE DCA
    private IEnumerable<int> _selectedCryptoIds = new List<int>();
    private DateTime? _multipleStartDate = null;
    private DateTime? _multipleEndDate = DateTime.Today;
    private decimal _monthlyInvestment = 200;
    private List<InvestmentData> _multipleInvestmentDataList = new List<InvestmentData>();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await GetCurrencies();
        AddInvestmentPlan();
    }

    public async Task GetCurrencies()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("CryptoCalculator");
            _cryptos = await client.GetFromJsonAsync<List<CryptoCurrency>>("api/dca/currencies") ?? new List<CryptoCurrency>();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return;
        }
    }

    public void AddInvestmentPlan()
    {
        _investmentPlans.Add(new InvestmentPlan
            {
                MonthlyInvestment = 100,
                IsValidStartDate = true,
                StartDate = DateTime.Today,
            });
    }

public async Task CalculateDCAInvestment()
{
    try
    {
        var client = HttpClientFactory.CreateClient("CryptoCalculator");
        _investmentDataList.Clear();

        foreach (var plan in _investmentPlans)
        {
            if (plan.StartDate != null && (plan.StartDate?.Day == 15 || plan.StartDate?.Day == 20 || plan.StartDate?.Day == 25))
            {
                var url = $"api/dca/calculate?cryptoIds={plan.CryptoId}&startDates={plan.StartDate:yyyy-MM-dd}&monthlyInvestments={plan.MonthlyInvestment}&endDate={_endDate:yyyy-MM-dd}";
                var investmentData = await client.GetFromJsonAsync<List<InvestmentData>>(url);

                if (investmentData != null)
                {
                    _investmentDataList.AddRange(investmentData);
                    Snackbar.Add("Success", Severity.Success);
                }
            }
            else
            {
                Snackbar.Add("Please choose one of the 15th, 20th, or 25th day of the month", Severity.Error);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
    }
}

    public async Task CalculateDCAInvestmentForMultipleCryptos()
    {
        try
        {
            @if (_multipleStartDate.HasValue && (_multipleStartDate.Value.Day == 15 || _multipleStartDate.Value.Day == 20 || _multipleStartDate.Value.Day == 25))
            {
                var client = HttpClientFactory.CreateClient("CryptoCalculator");
                _multipleInvestmentDataList.Clear();

                var cryptoIds = string.Join("&", _selectedCryptoIds.Select(id => $"cryptoIds={Uri.EscapeDataString(id.ToString())}"));
                var startDate = Uri.EscapeDataString((_multipleStartDate ?? DateTime.Today).ToString("yyyy-MM-dd"));
                var endDate = Uri.EscapeDataString((_multipleEndDate ?? DateTime.Today).ToString("yyyy-MM-dd"));

                var selectedCryptoIdsList = _selectedCryptoIds.ToList();
                var investmentShares = string.Join("&", selectedCryptoIdsList.Select(id => $"investmentShares={Uri.EscapeDataString((100 / selectedCryptoIdsList.Count).ToString())}"));

                var url = $"api/dca/calculate-multiple?{cryptoIds}&startDate={startDate}&endDate={endDate}&monthlyInvestment={_monthlyInvestment}&{investmentShares}";
                var investmentData = await client.GetFromJsonAsync<List<InvestmentData>>(url);

                if (investmentData != null)
                {
                    _multipleInvestmentDataList.AddRange(investmentData);
                }
            }
            else
            {
                Snackbar.Add("Please chose one of 15th, 20th or 25th day of the month", Severity.Error);

            }
    }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

}